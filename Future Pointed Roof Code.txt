
/**Returns an array of vertices for a building with a triangular, middle-pointed roof
 * using triangle fan.
 * 
 * @param {*} minX X value the tower should start at
 * @param {*} maxX X value the tower should end at
 * @param {*} minY The Y value the skyline base ends and the individual
 * building starts
 * @param {*} towerHeight The maximum Y value of the tower
 */
function returnVerticesCurvedTower(minX, maxX, minY, towerHeight) {
    //We can't make this actually circular, but reading Flatland has given me an idea...
    var YDiff = towerHeight - minY;
    var XDiff = maxX - minX;

    var curvedTower = [
        //Bottom two vertices; Fan starts with bottom left
        maxX, minY,
        minX, minY,
        minX, towerHeight
        //All vertices in between the two towerHeight vertices; used to make circular shaped roof
    ];

    //Need a for loop for all vertices between the two towerHeight vertices; work smarter not harder
    //TODO: Works but make it more curved
    for (i = 0; i < 10; i++)
        curvedTower.push(minX + i * (XDiff/20), towerHeight + i* (YDiff/10));
    for (i = 0; i < 10; i++)
        curvedTower.push(maxX - i * (XDiff/20), towerHeight - i * (YDiff/10));
    curvedTower.push(maxX, towerHeight); //Final vertex

    return curvedTower;
}